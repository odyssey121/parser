{"version":3,"sources":["components/Table.js","App.js","serviceWorker.js","index.js"],"names":["placeholder","Typography","Text","type","style","fontSize","spin","ResultTable","result","loading","className","locale","emptyText","dataSource","columns","title","dataIndex","key","width","render","linkContent","map","link","href","date","config","initialValue","required","validate","trigger","rules","message","Form","create","form","useEffect","setResult","setErrors","useState","setLoading","errors","getData","values","a","fetch","method","headers","Accept","body","JSON","stringify","rawResponse","json","content","Array","isArray","onSubmit","e","preventDefault","validateFields","err","Item","hasFeedback","validateStatus","help","getFieldDecorator","Option","value","id","onClick","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"css/js/main.03e783e9.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\nimport { Icon, Table, Typography } from \"antd\";\r\nconst { Text } = Typography;\r\n\r\nconst placeholder = <Icon type=\"loading\" style={{ fontSize: 44 }} spin />;\r\n\r\nconst ResultTable = ({ result, loading }) => {\r\n  //   const renderTable = () => {\r\n  //     if (result){\r\n\r\n  //     }\r\n\r\n  //   };\r\n\r\n  const renderColumns = () => {\r\n    return [\r\n      {\r\n        title: \"Загаловок\",\r\n        dataIndex: \"title\",\r\n        key: \"title\",\r\n        width: \"70%\",\r\n        render: title => <div>{title && title}</div>\r\n        // sorter: (a, b) => {\r\n        //   return a.title.localeCompare(b.title);\r\n        // }\r\n      },\r\n      {\r\n        title: \"Ссылки на контент\",\r\n        dataIndex: \"linkContent\",\r\n        key: \"linkContent\",\r\n        width: \"20%\",\r\n        render: linkContent => (\r\n          <div>\r\n            {linkContent && linkContent.map(link => <a href={link}>{link}</a>)}\r\n          </div>\r\n        )\r\n        // sorter: (a, b) => {\r\n        //   return a.content.localeCompare(b.content);\r\n        // }\r\n      },\r\n      {\r\n        title: \"Дата\",\r\n        dataIndex: \"date\",\r\n        key: \"date\",\r\n        width: \"10\",\r\n        render: date => <div>{date && date}</div>\r\n        // sorter: (a, b) => {\r\n        //   return a.date.localeCompare(b.date);\r\n        // }\r\n      }\r\n    ];\r\n  };\r\n\r\n  return (\r\n    <div className=\"Table-wrapper\">\r\n      <Table\r\n        locale={{ emptyText: loading ? placeholder : \"Нету результатов...\" }}\r\n        dataSource={result}\r\n        columns={renderColumns()}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResultTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ResultTable from \"./components/Table\";\r\nimport { Form, Input, Button, Select, InputNumber } from \"antd\";\r\nimport \"./App.css\";\r\n\r\nconst config = (initialValue, required) => ({\r\n  initialValue,\r\n  validate: [\r\n    {\r\n      trigger: \"onChange\",\r\n      rules: [\r\n        {\r\n          required: required,\r\n          message: \"Поле, обязательное для заполнения\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n});\r\n\r\nfunction App({ form }) {\r\n  useEffect(() => {\r\n    if (loading === true) {\r\n      setResult([]);\r\n      setErrors(null);\r\n    }\r\n  }, loading);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [result, setResult] = useState([]);\r\n  const [errors, setErrors] = useState(null);\r\n\r\n  const getData = async values => {\r\n    setLoading(true);\r\n    const rawResponse = await fetch(\"/api/news\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\"\r\n      },\r\n      body: JSON.stringify(values)\r\n    });\r\n    const content = await rawResponse.json();\r\n    setLoading(false);\r\n    Array.isArray(content) ? setResult(content) : setErrors(content);\r\n  };\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        getData(values);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Form className=\"Main-form\" onSubmit={onSubmit}>\r\n          <div>\r\n            <span className=\"label\">\r\n              Сайт/Блог для парсинга\r\n              <br />\r\n              вконце без слеша\r\n            </span>\r\n            <Form.Item\r\n              hasFeedback\r\n              validateStatus={errors && \"error\"}\r\n              help={errors && errors}\r\n            >\r\n              {form.getFieldDecorator(\r\n                \"site\",\r\n                config(\"https://pasmi.ru/cat/news\", true)\r\n              )(<Input placeholder=\"Укажите сайт\" className=\"md\" />)}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">Тэг главного контейнера</span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"containerTag\", config(\"article\", true))(\r\n                <Input\r\n                  className=\"sm\"\r\n                  placeholder=\"Укажите тэг контейнера новости\"\r\n                />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">Класс главного контейнера</span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"containerClass\",\r\n                config(\"preview\", false)\r\n              )(\r\n                <Input\r\n                  className=\"sm\"\r\n                  placeholder=\"Укажите класс контейнера новости\"\r\n                />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">Заголовка(по умолчанию h1)</span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"titleTag\", config(\"h1\", true))(\r\n                <Input className=\"sm\" placeholder=\"Укажите тэг заголовка\" />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">\r\n              Класс Заголовка\r\n              <br />\r\n              (необязательно)\r\n            </span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"titleClass\", config(\"\", false))(\r\n                <Input className=\"sm\" placeholder=\"Укажите тэг заголовка\" />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">\r\n              Укажите в котором тэги\r\n              <br /> ссылки на страницы\r\n            </span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"pageContainer\", config(\"div\", false))(\r\n                <Input className=\"sm\" placeholder=\"Укажите <тэг>\" />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">\r\n              Укажите класс контайнера для страниц\r\n              <br /> (необязательно)\r\n            </span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\r\n                \"pageContainerСlass\",\r\n                config(\"nav-links\", false)\r\n              )(<Input className=\"sm\" placeholder=\"Укажите <тэг>\" />)}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">Формат страниц</span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"pageFormat\", config(\"/page/\", false))(\r\n                <Select placeholder=\"Укажите формат страниц\" className=\"sm\">\r\n                  <Select.Option value=\"/page/\" key=\"/page/\">\r\n                    /page/\r\n                  </Select.Option>\r\n                  <Select.Option value=\"?page=\" key=\"?page=\">\r\n                    ?page=\r\n                  </Select.Option>\r\n                </Select>\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">Сколько стр. парсить?</span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"pageCount\", {})(\r\n                <InputNumber\r\n                  className=\"sm\"\r\n                  placeholder=\"Укажите число (необязательно)\"\r\n                />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <span className=\"label\">\r\n              Класс времени новости\r\n              <br />\r\n              (необязательно)\r\n            </span>\r\n            <Form.Item>\r\n              {form.getFieldDecorator(\"timeClass\", config(\"time\", false))(\r\n                <Input\r\n                  className=\"sm\"\r\n                  placeholder=\"Укажите класс времени новости\"\r\n                />\r\n              )}\r\n            </Form.Item>\r\n          </div>\r\n          <div>\r\n            <Button type=\"danger\" id=\"clear\" onClick={() => setResult([])}>\r\n              Очисть результаты\r\n            </Button>\r\n          </div>\r\n          <div>\r\n            <Button onClick={onSubmit} type=\"primary\">\r\n              Попробывать (парсинг)\r\n            </Button>\r\n          </div>\r\n        </Form>\r\n      </header>\r\n      <ResultTable result={result} loading={loading} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form.create()(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}